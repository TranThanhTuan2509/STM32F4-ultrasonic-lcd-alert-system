
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001128  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080012c8  080012c8  000022c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001344  08001344  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001344  08001344  00002344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800134c  0800134c  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800134c  0800134c  0000234c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001350  08001350  00002350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001354  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000054  080013a8  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080013a8  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000183f  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000672  00000000  00000000  000048c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00004f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000191  00000000  00000000  00005170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014941  00000000  00000000  00005301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bc9  00000000  00000000  00019c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d79  00000000  00000000  0001c80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c34  00000000  00000000  0009e5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  0009f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080012b0 	.word	0x080012b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	080012b0 	.word	0x080012b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
void delayUs(uint16_t time);
void delayMs(uint32_t time);
uint8_t getDistance(void);
void updateLCDLine(uint8_t line, const char* str); // Helper function

int main(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
    initGPIO();
 8000286:	f000 f891 	bl	80003ac <initGPIO>
    initI2C();
 800028a:	f000 f8ef 	bl	800046c <initI2C>
    initTimer2();
 800028e:	f000 f913 	bl	80004b8 <initTimer2>
    initLCD();
 8000292:	f000 fa4b 	bl	800072c <initLCD>

    // Khởi tạo màn hình LCD với hai dòng
    sendCmdToLCD(LCD_CLEAR);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 fa3a 	bl	8000710 <sendCmdToLCD>
    updateLCDLine(1, "Distance:    "); // First line
 800029c:	493b      	ldr	r1, [pc, #236]	@ (800038c <main+0x10c>)
 800029e:	2001      	movs	r0, #1
 80002a0:	f000 fa8a 	bl	80007b8 <updateLCDLine>
    updateLCDLine(2, "Object: 0");      // Second line initially no object
 80002a4:	493a      	ldr	r1, [pc, #232]	@ (8000390 <main+0x110>)
 80002a6:	2002      	movs	r0, #2
 80002a8:	f000 fa86 	bl	80007b8 <updateLCDLine>

    // Tắt LED nháy ban đầu
    GPIOA->BSRR = (1 << (LED_PIN + 16)); // Tắt LED (Active high)
 80002ac:	4b39      	ldr	r3, [pc, #228]	@ (8000394 <main+0x114>)
 80002ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002b2:	619a      	str	r2, [r3, #24]

    while (1) {
        Distance = getDistance();
 80002b4:	f000 f94e 	bl	8000554 <getDistance>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b36      	ldr	r3, [pc, #216]	@ (8000398 <main+0x118>)
 80002be:	701a      	strb	r2, [r3, #0]
        char buffer[16];

        // Update Distance on first line
        if (Distance == 0xFF) {
 80002c0:	4b35      	ldr	r3, [pc, #212]	@ (8000398 <main+0x118>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2bff      	cmp	r3, #255	@ 0xff
 80002c6:	d106      	bne.n	80002d6 <main+0x56>
            snprintf(buffer, sizeof(buffer), "Distance: Err");
 80002c8:	463b      	mov	r3, r7
 80002ca:	4a34      	ldr	r2, [pc, #208]	@ (800039c <main+0x11c>)
 80002cc:	2110      	movs	r1, #16
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fb42 	bl	8000958 <sniprintf>
 80002d4:	e006      	b.n	80002e4 <main+0x64>
        } else {
            snprintf(buffer, sizeof(buffer), "Distance:%3dcm", Distance);
 80002d6:	4b30      	ldr	r3, [pc, #192]	@ (8000398 <main+0x118>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	4638      	mov	r0, r7
 80002dc:	4a30      	ldr	r2, [pc, #192]	@ (80003a0 <main+0x120>)
 80002de:	2110      	movs	r1, #16
 80002e0:	f000 fb3a 	bl	8000958 <sniprintf>
        }
        updateLCDLine(1, buffer);
 80002e4:	463b      	mov	r3, r7
 80002e6:	4619      	mov	r1, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	f000 fa65 	bl	80007b8 <updateLCDLine>

        // Determine Object Detection Status
        uint8_t object = (Distance <= 30 && Distance != 0xFF) ? 1 : 0;
 80002ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000398 <main+0x118>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b1e      	cmp	r3, #30
 80002f4:	d805      	bhi.n	8000302 <main+0x82>
 80002f6:	4b28      	ldr	r3, [pc, #160]	@ (8000398 <main+0x118>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2bff      	cmp	r3, #255	@ 0xff
 80002fc:	d001      	beq.n	8000302 <main+0x82>
 80002fe:	2301      	movs	r3, #1
 8000300:	e000      	b.n	8000304 <main+0x84>
 8000302:	2300      	movs	r3, #0
 8000304:	75bb      	strb	r3, [r7, #22]

        // Update Object status on second line
        snprintf(buffer, sizeof(buffer), "Object: %d", object);
 8000306:	7dbb      	ldrb	r3, [r7, #22]
 8000308:	4638      	mov	r0, r7
 800030a:	4a26      	ldr	r2, [pc, #152]	@ (80003a4 <main+0x124>)
 800030c:	2110      	movs	r1, #16
 800030e:	f000 fb23 	bl	8000958 <sniprintf>
        updateLCDLine(2, buffer);
 8000312:	463b      	mov	r3, r7
 8000314:	4619      	mov	r1, r3
 8000316:	2002      	movs	r0, #2
 8000318:	f000 fa4e 	bl	80007b8 <updateLCDLine>

        if (object) {
 800031c:	7dbb      	ldrb	r3, [r7, #22]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d02b      	beq.n	800037a <main+0xfa>
            uint8_t freq;
            if (Distance == 0) {
 8000322:	4b1d      	ldr	r3, [pc, #116]	@ (8000398 <main+0x118>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d102      	bne.n	8000330 <main+0xb0>
                freq = 10; // Cực gần
 800032a:	230a      	movs	r3, #10
 800032c:	75fb      	strb	r3, [r7, #23]
 800032e:	e015      	b.n	800035c <main+0xdc>
            } else {
                freq = 1 + ((30 - Distance) * 9) / 30;
 8000330:	4b19      	ldr	r3, [pc, #100]	@ (8000398 <main+0x118>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	f1c3 021e 	rsb	r2, r3, #30
 8000338:	4613      	mov	r3, r2
 800033a:	00db      	lsls	r3, r3, #3
 800033c:	4413      	add	r3, r2
 800033e:	4a1a      	ldr	r2, [pc, #104]	@ (80003a8 <main+0x128>)
 8000340:	fb82 1203 	smull	r1, r2, r2, r3
 8000344:	441a      	add	r2, r3
 8000346:	1112      	asrs	r2, r2, #4
 8000348:	17db      	asrs	r3, r3, #31
 800034a:	1ad3      	subs	r3, r2, r3
 800034c:	b2db      	uxtb	r3, r3
 800034e:	3301      	adds	r3, #1
 8000350:	75fb      	strb	r3, [r7, #23]
                if (freq > 10) freq = 10;
 8000352:	7dfb      	ldrb	r3, [r7, #23]
 8000354:	2b0a      	cmp	r3, #10
 8000356:	d901      	bls.n	800035c <main+0xdc>
 8000358:	230a      	movs	r3, #10
 800035a:	75fb      	strb	r3, [r7, #23]
            }
            uint32_t delay_time_ms = 50 / freq; // Half period = 500ms / freq
 800035c:	7dfb      	ldrb	r3, [r7, #23]
 800035e:	2232      	movs	r2, #50	@ 0x32
 8000360:	fb92 f3f3 	sdiv	r3, r2, r3
 8000364:	613b      	str	r3, [r7, #16]
            GPIOA->ODR ^= (1 << LED_PIN);
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <main+0x114>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <main+0x114>)
 800036c:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 8000370:	6153      	str	r3, [r2, #20]
            delayMs(delay_time_ms);
 8000372:	6938      	ldr	r0, [r7, #16]
 8000374:	f000 f8d3 	bl	800051e <delayMs>
 8000378:	e79c      	b.n	80002b4 <main+0x34>
        } else {
            GPIOA->BSRR = (1 << (LED_PIN + 16)); // Tắt LED
 800037a:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <main+0x114>)
 800037c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000380:	619a      	str	r2, [r3, #24]
            delayMs(100);
 8000382:	2064      	movs	r0, #100	@ 0x64
 8000384:	f000 f8cb 	bl	800051e <delayMs>
    while (1) {
 8000388:	e794      	b.n	80002b4 <main+0x34>
 800038a:	bf00      	nop
 800038c:	080012c8 	.word	0x080012c8
 8000390:	080012d8 	.word	0x080012d8
 8000394:	40020000 	.word	0x40020000
 8000398:	20000074 	.word	0x20000074
 800039c:	080012e4 	.word	0x080012e4
 80003a0:	080012f4 	.word	0x080012f4
 80003a4:	08001304 	.word	0x08001304
 80003a8:	88888889 	.word	0x88888889

080003ac <initGPIO>:
        }
    }
}

void initGPIO(void) {
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOAEN;
 80003b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000460 <initGPIO+0xb4>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000460 <initGPIO+0xb4>)
 80003b6:	f043 0303 	orr.w	r3, r3, #3
 80003ba:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER = (GPIOB->MODER & ~(0xF << 16)) | (0xA << 16); // PB8 và PB9 là AF4
 80003bc:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <initGPIO+0xb8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80003c4:	4a27      	ldr	r2, [pc, #156]	@ (8000464 <initGPIO+0xb8>)
 80003c6:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80003ca:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << 8) | (1 << 9); // Open-Drain
 80003cc:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <initGPIO+0xb8>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4a24      	ldr	r2, [pc, #144]	@ (8000464 <initGPIO+0xb8>)
 80003d2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80003d6:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0xF << 16); // Tốc độ cao
 80003d8:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <initGPIO+0xb8>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	4a21      	ldr	r2, [pc, #132]	@ (8000464 <initGPIO+0xb8>)
 80003de:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 80003e2:	6093      	str	r3, [r2, #8]
    GPIOB->AFR[1] |= (4 << GPIO_AFRH_AFSEL8_Pos) | (4 << GPIO_AFRH_AFSEL9_Pos); // AF4 cho I2C1
 80003e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <initGPIO+0xb8>)
 80003e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000464 <initGPIO+0xb8>)
 80003ea:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80003ee:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->MODER = (GPIOA->MODER & ~0xF) | 0x1; // PA0 là Output, PA1 là Input
 80003f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000468 <initGPIO+0xbc>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f023 030f 	bic.w	r3, r3, #15
 80003f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000468 <initGPIO+0xbc>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << TRIG_PIN); // Push-Pull cho TRIG_PIN
 8000400:	4b19      	ldr	r3, [pc, #100]	@ (8000468 <initGPIO+0xbc>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	4a18      	ldr	r2, [pc, #96]	@ (8000468 <initGPIO+0xbc>)
 8000406:	f023 0301 	bic.w	r3, r3, #1
 800040a:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (3 << (TRIG_PIN * 2)); // Tốc độ cao
 800040c:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <initGPIO+0xbc>)
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	4a15      	ldr	r2, [pc, #84]	@ (8000468 <initGPIO+0xbc>)
 8000412:	f043 0303 	orr.w	r3, r3, #3
 8000416:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~0xF; // No Pull-Up, No Pull-Down
 8000418:	4b13      	ldr	r3, [pc, #76]	@ (8000468 <initGPIO+0xbc>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	4a12      	ldr	r2, [pc, #72]	@ (8000468 <initGPIO+0xbc>)
 800041e:	f023 030f 	bic.w	r3, r3, #15
 8000422:	60d3      	str	r3, [r2, #12]
    GPIOA->MODER |= (0x01 << (LED_PIN * 2)); // PA8 là Output
 8000424:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <initGPIO+0xbc>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a0f      	ldr	r2, [pc, #60]	@ (8000468 <initGPIO+0xbc>)
 800042a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800042e:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << LED_PIN); // Push-Pull
 8000430:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <initGPIO+0xbc>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4a0c      	ldr	r2, [pc, #48]	@ (8000468 <initGPIO+0xbc>)
 8000436:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800043a:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (0x03 << (LED_PIN * 2)); // Tốc độ cao
 800043c:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <initGPIO+0xbc>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	4a09      	ldr	r2, [pc, #36]	@ (8000468 <initGPIO+0xbc>)
 8000442:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000446:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~(0x03 << (LED_PIN * 2)); // No Pull-Up, No Pull-Down
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <initGPIO+0xbc>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	4a06      	ldr	r2, [pc, #24]	@ (8000468 <initGPIO+0xbc>)
 800044e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000452:	60d3      	str	r3, [r2, #12]
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40023800 	.word	0x40023800
 8000464:	40020400 	.word	0x40020400
 8000468:	40020000 	.word	0x40020000

0800046c <initI2C>:

void initI2C(void) {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <initI2C+0x44>)
 8000472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000474:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <initI2C+0x44>)
 8000476:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800047a:	6413      	str	r3, [r2, #64]	@ 0x40
    I2C1->CR1 &= ~I2C_CR1_PE;
 800047c:	4b0d      	ldr	r3, [pc, #52]	@ (80004b4 <initI2C+0x48>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0c      	ldr	r2, [pc, #48]	@ (80004b4 <initI2C+0x48>)
 8000482:	f023 0301 	bic.w	r3, r3, #1
 8000486:	6013      	str	r3, [r2, #0]
    I2C1->CR2 = 16; // Assuming APB1 clock is 16MHz
 8000488:	4b0a      	ldr	r3, [pc, #40]	@ (80004b4 <initI2C+0x48>)
 800048a:	2210      	movs	r2, #16
 800048c:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 80; // 100kHz
 800048e:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <initI2C+0x48>)
 8000490:	2250      	movs	r2, #80	@ 0x50
 8000492:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 8000494:	4b07      	ldr	r3, [pc, #28]	@ (80004b4 <initI2C+0x48>)
 8000496:	2211      	movs	r2, #17
 8000498:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 800049a:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <initI2C+0x48>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a05      	ldr	r2, [pc, #20]	@ (80004b4 <initI2C+0x48>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6013      	str	r3, [r2, #0]
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	40023800 	.word	0x40023800
 80004b4:	40005400 	.word	0x40005400

080004b8 <initTimer2>:

void initTimer2(void) {
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <initTimer2+0x34>)
 80004be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004c0:	4a0a      	ldr	r2, [pc, #40]	@ (80004ec <initTimer2+0x34>)
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 15;
 80004c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004cc:	220f      	movs	r2, #15
 80004ce:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 0xFFFF;
 80004d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CR1 = 1;
 80004da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40023800 	.word	0x40023800

080004f0 <delayUs>:

void delayUs(uint16_t time) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
    TIM2->CNT = 0;
 80004fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004fe:	2200      	movs	r2, #0
 8000500:	625a      	str	r2, [r3, #36]	@ 0x24
    while (TIM2->CNT < time);
 8000502:	bf00      	nop
 8000504:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	429a      	cmp	r2, r3
 800050e:	d3f9      	bcc.n	8000504 <delayUs+0x14>
}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <delayMs>:

void delayMs(uint32_t time) {
 800051e:	b480      	push	{r7}
 8000520:	b085      	sub	sp, #20
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < (time * 16000); i++) {
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	e003      	b.n	8000534 <delayMs+0x16>
        __NOP();
 800052c:	bf00      	nop
    for (uint32_t i = 0; i < (time * 16000); i++) {
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3301      	adds	r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800053a:	fb02 f303 	mul.w	r3, r2, r3
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	429a      	cmp	r2, r3
 8000542:	d3f3      	bcc.n	800052c <delayMs+0xe>
    }
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <getDistance>:

uint8_t getDistance(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
    GPIOA->BSRR = (1 << TRIG_PIN);
 800055a:	4b2e      	ldr	r3, [pc, #184]	@ (8000614 <getDistance+0xc0>)
 800055c:	2201      	movs	r2, #1
 800055e:	619a      	str	r2, [r3, #24]
    delayUs(10);
 8000560:	200a      	movs	r0, #10
 8000562:	f7ff ffc5 	bl	80004f0 <delayUs>
    GPIOA->BSRR = (1 << (TRIG_PIN + 16));
 8000566:	4b2b      	ldr	r3, [pc, #172]	@ (8000614 <getDistance+0xc0>)
 8000568:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800056c:	619a      	str	r2, [r3, #24]
    uint32_t timeout = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
    while (!(GPIOA->IDR & (1 << ECHO_PIN))) {
 8000572:	e009      	b.n	8000588 <getDistance+0x34>
        if (++timeout > 30000) return 0xFF;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3301      	adds	r3, #1
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000580:	4293      	cmp	r3, r2
 8000582:	d901      	bls.n	8000588 <getDistance+0x34>
 8000584:	23ff      	movs	r3, #255	@ 0xff
 8000586:	e041      	b.n	800060c <getDistance+0xb8>
    while (!(GPIOA->IDR & (1 << ECHO_PIN))) {
 8000588:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <getDistance+0xc0>)
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	f003 0302 	and.w	r3, r3, #2
 8000590:	2b00      	cmp	r3, #0
 8000592:	d0ef      	beq.n	8000574 <getDistance+0x20>
    }
    TIM2->CNT = 0;
 8000594:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000598:	2200      	movs	r2, #0
 800059a:	625a      	str	r2, [r3, #36]	@ 0x24
    while (GPIOA->IDR & (1 << ECHO_PIN)) {
 800059c:	e006      	b.n	80005ac <getDistance+0x58>
        if (TIM2->CNT > 30000) break;
 800059e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005a4:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d806      	bhi.n	80005ba <getDistance+0x66>
    while (GPIOA->IDR & (1 << ECHO_PIN)) {
 80005ac:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <getDistance+0xc0>)
 80005ae:	691b      	ldr	r3, [r3, #16]
 80005b0:	f003 0302 	and.w	r3, r3, #2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1f2      	bne.n	800059e <getDistance+0x4a>
 80005b8:	e000      	b.n	80005bc <getDistance+0x68>
        if (TIM2->CNT > 30000) break;
 80005ba:	bf00      	nop
    }
    Difference = TIM2->CNT;
 80005bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c2:	4a15      	ldr	r2, [pc, #84]	@ (8000618 <getDistance+0xc4>)
 80005c4:	6013      	str	r3, [r2, #0]
    if (Difference == 0xFFFF || Difference > 30000) return 0xFF;
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <getDistance+0xc4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d005      	beq.n	80005de <getDistance+0x8a>
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <getDistance+0xc4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80005da:	4293      	cmp	r3, r2
 80005dc:	d901      	bls.n	80005e2 <getDistance+0x8e>
 80005de:	23ff      	movs	r3, #255	@ 0xff
 80005e0:	e014      	b.n	800060c <getDistance+0xb8>
    uint16_t distance = (Difference * 34) / 2000;
 80005e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <getDistance+0xc4>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	4613      	mov	r3, r2
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	4413      	add	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <getDistance+0xc8>)
 80005f2:	fba3 2302 	umull	r2, r3, r3, r2
 80005f6:	09db      	lsrs	r3, r3, #7
 80005f8:	807b      	strh	r3, [r7, #2]
    if (distance > 400) distance = 400;
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000600:	d902      	bls.n	8000608 <getDistance+0xb4>
 8000602:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000606:	807b      	strh	r3, [r7, #2]
    return (uint8_t)distance;
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	b2db      	uxtb	r3, r3
}
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40020000 	.word	0x40020000
 8000618:	20000070 	.word	0x20000070
 800061c:	10624dd3 	.word	0x10624dd3

08000620 <writeLCD>:

void writeLCD(uint8_t data, uint8_t mode) {
 8000620:	b480      	push	{r7}
 8000622:	b087      	sub	sp, #28
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	460a      	mov	r2, r1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	4613      	mov	r3, r2
 800062e:	71bb      	strb	r3, [r7, #6]
    uint8_t high = data & 0xF0;
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	74fb      	strb	r3, [r7, #19]
    uint8_t low = (data << 4) & 0xF0;
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	011b      	lsls	r3, r3, #4
 800063c:	74bb      	strb	r3, [r7, #18]
    uint8_t commands[] = {
 800063e:	7cfa      	ldrb	r2, [r7, #19]
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	4313      	orrs	r3, r2
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f043 030c 	orr.w	r3, r3, #12
 800064a:	b2db      	uxtb	r3, r3
 800064c:	733b      	strb	r3, [r7, #12]
 800064e:	7cfa      	ldrb	r2, [r7, #19]
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	4313      	orrs	r3, r2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f043 0308 	orr.w	r3, r3, #8
 800065a:	b2db      	uxtb	r3, r3
 800065c:	737b      	strb	r3, [r7, #13]
 800065e:	7cba      	ldrb	r2, [r7, #18]
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	4313      	orrs	r3, r2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f043 030c 	orr.w	r3, r3, #12
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73bb      	strb	r3, [r7, #14]
 800066e:	7cba      	ldrb	r2, [r7, #18]
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	4313      	orrs	r3, r2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	b2db      	uxtb	r3, r3
 800067c:	73fb      	strb	r3, [r7, #15]
        high | mode | LCD_BL | LCD_EN,
        high | mode | LCD_BL,
        low | mode | LCD_BL | LCD_EN,
        low | mode | LCD_BL
    };
    I2C1->CR1 |= I2C_CR1_START;
 800067e:	4b23      	ldr	r3, [pc, #140]	@ (800070c <writeLCD+0xec>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a22      	ldr	r2, [pc, #136]	@ (800070c <writeLCD+0xec>)
 8000684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000688:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 800068a:	bf00      	nop
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <writeLCD+0xec>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0f9      	beq.n	800068c <writeLCD+0x6c>
    I2C1->DR = LCD_ADDR;
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <writeLCD+0xec>)
 800069a:	224e      	movs	r2, #78	@ 0x4e
 800069c:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800069e:	bf00      	nop
 80006a0:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <writeLCD+0xec>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0f9      	beq.n	80006a0 <writeLCD+0x80>
    (void)I2C1->SR2;
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <writeLCD+0xec>)
 80006ae:	699b      	ldr	r3, [r3, #24]
    for (int i = 0; i < 4; ++i) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e010      	b.n	80006d8 <writeLCD+0xb8>
        I2C1->DR = commands[i];
 80006b6:	f107 020c 	add.w	r2, r7, #12
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4413      	add	r3, r2
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <writeLCD+0xec>)
 80006c2:	611a      	str	r2, [r3, #16]
        while (!(I2C1->SR1 & I2C_SR1_BTF));
 80006c4:	bf00      	nop
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <writeLCD+0xec>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0f9      	beq.n	80006c6 <writeLCD+0xa6>
    for (int i = 0; i < 4; ++i) {
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	ddeb      	ble.n	80006b6 <writeLCD+0x96>
    }
    I2C1->CR1 |= I2C_CR1_STOP;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <writeLCD+0xec>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <writeLCD+0xec>)
 80006e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006e8:	6013      	str	r3, [r2, #0]
    for (volatile int i = 0; i < 1600; i++);
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	e002      	b.n	80006f6 <writeLCD+0xd6>
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	3301      	adds	r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80006fc:	dbf8      	blt.n	80006f0 <writeLCD+0xd0>
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	371c      	adds	r7, #28
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	40005400 	.word	0x40005400

08000710 <sendCmdToLCD>:

void sendCmdToLCD(uint8_t cmd) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
    writeLCD(cmd, LCD_COMMAND);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff7e 	bl	8000620 <writeLCD>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <initLCD>:

void initLCD(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 80000; i++);
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e002      	b.n	800073e <initLCD+0x12>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3301      	adds	r3, #1
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a11      	ldr	r2, [pc, #68]	@ (8000788 <initLCD+0x5c>)
 8000742:	4293      	cmp	r3, r2
 8000744:	ddf8      	ble.n	8000738 <initLCD+0xc>
    sendCmdToLCD(0x33);
 8000746:	2033      	movs	r0, #51	@ 0x33
 8000748:	f7ff ffe2 	bl	8000710 <sendCmdToLCD>
    for (volatile int i = 0; i < 8000; i++);
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	e002      	b.n	8000758 <initLCD+0x2c>
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800075e:	dbf8      	blt.n	8000752 <initLCD+0x26>
    sendCmdToLCD(0x32);
 8000760:	2032      	movs	r0, #50	@ 0x32
 8000762:	f7ff ffd5 	bl	8000710 <sendCmdToLCD>
    sendCmdToLCD(LCD_FUNCTION_SET);
 8000766:	2028      	movs	r0, #40	@ 0x28
 8000768:	f7ff ffd2 	bl	8000710 <sendCmdToLCD>
    sendCmdToLCD(LCD_DISPLAY_ON);
 800076c:	200c      	movs	r0, #12
 800076e:	f7ff ffcf 	bl	8000710 <sendCmdToLCD>
    sendCmdToLCD(LCD_CLEAR);
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff ffcc 	bl	8000710 <sendCmdToLCD>
    sendCmdToLCD(LCD_ENTRY_MODE);
 8000778:	2006      	movs	r0, #6
 800077a:	f7ff ffc9 	bl	8000710 <sendCmdToLCD>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	0001387f 	.word	0x0001387f

0800078c <printLCD>:

void printLCD(const char* str) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000794:	e007      	b.n	80007a6 <printLCD+0x1a>
        writeLCD(*str++, LCD_DATA);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2101      	movs	r1, #1
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff3d 	bl	8000620 <writeLCD>
    while (*str) {
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f3      	bne.n	8000796 <printLCD+0xa>
    }
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <updateLCDLine>:

void updateLCDLine(uint8_t line, const char* str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
    if (line == 1) {
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d103      	bne.n	80007d2 <updateLCDLine+0x1a>
        sendCmdToLCD(0x80);
 80007ca:	2080      	movs	r0, #128	@ 0x80
 80007cc:	f7ff ffa0 	bl	8000710 <sendCmdToLCD>
 80007d0:	e005      	b.n	80007de <updateLCDLine+0x26>
    } else if (line == 2) {
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d102      	bne.n	80007de <updateLCDLine+0x26>
        sendCmdToLCD(0xC0);
 80007d8:	20c0      	movs	r0, #192	@ 0xc0
 80007da:	f7ff ff99 	bl	8000710 <sendCmdToLCD>
    }
    printLCD(str);
 80007de:	6838      	ldr	r0, [r7, #0]
 80007e0:	f7ff ffd4 	bl	800078c <printLCD>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <NMI_Handler+0x4>

080007f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <MemManage_Handler+0x4>

08000804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <UsageFault_Handler+0x4>

08000814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000842:	f000 f875 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a14      	ldr	r2, [pc, #80]	@ (80008a8 <_sbrk+0x5c>)
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <_sbrk+0x60>)
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <_sbrk+0x64>)
 800086a:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <_sbrk+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800087c:	f000 f8a0 	bl	80009c0 <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	220c      	movs	r2, #12
 8000884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e009      	b.n	80008a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000892:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	4a05      	ldr	r2, [pc, #20]	@ (80008b0 <_sbrk+0x64>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20018000 	.word	0x20018000
 80008ac:	00000400 	.word	0x00000400
 80008b0:	20000078 	.word	0x20000078
 80008b4:	200001c8 	.word	0x200001c8

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	@ (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000914 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008e0:	f7ff ffea 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	@ (8000918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	@ (800091c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800090a:	f000 f85f 	bl	80009cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fcb7 	bl	8000280 <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000914:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000920:	08001354 	.word	0x08001354
  ldr r2, =_sbss
 8000924:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000928:	200001c8 	.word	0x200001c8

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000000 	.word	0x20000000
 8000954:	2000007c 	.word	0x2000007c

08000958 <sniprintf>:
 8000958:	b40c      	push	{r2, r3}
 800095a:	b530      	push	{r4, r5, lr}
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <sniprintf+0x64>)
 800095e:	1e0c      	subs	r4, r1, #0
 8000960:	681d      	ldr	r5, [r3, #0]
 8000962:	b09d      	sub	sp, #116	@ 0x74
 8000964:	da08      	bge.n	8000978 <sniprintf+0x20>
 8000966:	238b      	movs	r3, #139	@ 0x8b
 8000968:	602b      	str	r3, [r5, #0]
 800096a:	f04f 30ff 	mov.w	r0, #4294967295
 800096e:	b01d      	add	sp, #116	@ 0x74
 8000970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000974:	b002      	add	sp, #8
 8000976:	4770      	bx	lr
 8000978:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800097c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000980:	bf14      	ite	ne
 8000982:	f104 33ff 	addne.w	r3, r4, #4294967295
 8000986:	4623      	moveq	r3, r4
 8000988:	9304      	str	r3, [sp, #16]
 800098a:	9307      	str	r3, [sp, #28]
 800098c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000990:	9002      	str	r0, [sp, #8]
 8000992:	9006      	str	r0, [sp, #24]
 8000994:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000998:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800099a:	ab21      	add	r3, sp, #132	@ 0x84
 800099c:	a902      	add	r1, sp, #8
 800099e:	4628      	mov	r0, r5
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	f000 f98d 	bl	8000cc0 <_svfiprintf_r>
 80009a6:	1c43      	adds	r3, r0, #1
 80009a8:	bfbc      	itt	lt
 80009aa:	238b      	movlt	r3, #139	@ 0x8b
 80009ac:	602b      	strlt	r3, [r5, #0]
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	d0dd      	beq.n	800096e <sniprintf+0x16>
 80009b2:	9b02      	ldr	r3, [sp, #8]
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	e7d9      	b.n	800096e <sniprintf+0x16>
 80009ba:	bf00      	nop
 80009bc:	20000004 	.word	0x20000004

080009c0 <__errno>:
 80009c0:	4b01      	ldr	r3, [pc, #4]	@ (80009c8 <__errno+0x8>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000004 	.word	0x20000004

080009cc <__libc_init_array>:
 80009cc:	b570      	push	{r4, r5, r6, lr}
 80009ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000a04 <__libc_init_array+0x38>)
 80009d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000a08 <__libc_init_array+0x3c>)
 80009d2:	1b64      	subs	r4, r4, r5
 80009d4:	10a4      	asrs	r4, r4, #2
 80009d6:	2600      	movs	r6, #0
 80009d8:	42a6      	cmp	r6, r4
 80009da:	d109      	bne.n	80009f0 <__libc_init_array+0x24>
 80009dc:	4d0b      	ldr	r5, [pc, #44]	@ (8000a0c <__libc_init_array+0x40>)
 80009de:	4c0c      	ldr	r4, [pc, #48]	@ (8000a10 <__libc_init_array+0x44>)
 80009e0:	f000 fc66 	bl	80012b0 <_init>
 80009e4:	1b64      	subs	r4, r4, r5
 80009e6:	10a4      	asrs	r4, r4, #2
 80009e8:	2600      	movs	r6, #0
 80009ea:	42a6      	cmp	r6, r4
 80009ec:	d105      	bne.n	80009fa <__libc_init_array+0x2e>
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f4:	4798      	blx	r3
 80009f6:	3601      	adds	r6, #1
 80009f8:	e7ee      	b.n	80009d8 <__libc_init_array+0xc>
 80009fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80009fe:	4798      	blx	r3
 8000a00:	3601      	adds	r6, #1
 8000a02:	e7f2      	b.n	80009ea <__libc_init_array+0x1e>
 8000a04:	0800134c 	.word	0x0800134c
 8000a08:	0800134c 	.word	0x0800134c
 8000a0c:	0800134c 	.word	0x0800134c
 8000a10:	08001350 	.word	0x08001350

08000a14 <__retarget_lock_acquire_recursive>:
 8000a14:	4770      	bx	lr

08000a16 <__retarget_lock_release_recursive>:
 8000a16:	4770      	bx	lr

08000a18 <_free_r>:
 8000a18:	b538      	push	{r3, r4, r5, lr}
 8000a1a:	4605      	mov	r5, r0
 8000a1c:	2900      	cmp	r1, #0
 8000a1e:	d041      	beq.n	8000aa4 <_free_r+0x8c>
 8000a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a24:	1f0c      	subs	r4, r1, #4
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bfb8      	it	lt
 8000a2a:	18e4      	addlt	r4, r4, r3
 8000a2c:	f000 f8e0 	bl	8000bf0 <__malloc_lock>
 8000a30:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa8 <_free_r+0x90>)
 8000a32:	6813      	ldr	r3, [r2, #0]
 8000a34:	b933      	cbnz	r3, 8000a44 <_free_r+0x2c>
 8000a36:	6063      	str	r3, [r4, #4]
 8000a38:	6014      	str	r4, [r2, #0]
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a40:	f000 b8dc 	b.w	8000bfc <__malloc_unlock>
 8000a44:	42a3      	cmp	r3, r4
 8000a46:	d908      	bls.n	8000a5a <_free_r+0x42>
 8000a48:	6820      	ldr	r0, [r4, #0]
 8000a4a:	1821      	adds	r1, r4, r0
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	bf01      	itttt	eq
 8000a50:	6819      	ldreq	r1, [r3, #0]
 8000a52:	685b      	ldreq	r3, [r3, #4]
 8000a54:	1809      	addeq	r1, r1, r0
 8000a56:	6021      	streq	r1, [r4, #0]
 8000a58:	e7ed      	b.n	8000a36 <_free_r+0x1e>
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	b10b      	cbz	r3, 8000a64 <_free_r+0x4c>
 8000a60:	42a3      	cmp	r3, r4
 8000a62:	d9fa      	bls.n	8000a5a <_free_r+0x42>
 8000a64:	6811      	ldr	r1, [r2, #0]
 8000a66:	1850      	adds	r0, r2, r1
 8000a68:	42a0      	cmp	r0, r4
 8000a6a:	d10b      	bne.n	8000a84 <_free_r+0x6c>
 8000a6c:	6820      	ldr	r0, [r4, #0]
 8000a6e:	4401      	add	r1, r0
 8000a70:	1850      	adds	r0, r2, r1
 8000a72:	4283      	cmp	r3, r0
 8000a74:	6011      	str	r1, [r2, #0]
 8000a76:	d1e0      	bne.n	8000a3a <_free_r+0x22>
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	6053      	str	r3, [r2, #4]
 8000a7e:	4408      	add	r0, r1
 8000a80:	6010      	str	r0, [r2, #0]
 8000a82:	e7da      	b.n	8000a3a <_free_r+0x22>
 8000a84:	d902      	bls.n	8000a8c <_free_r+0x74>
 8000a86:	230c      	movs	r3, #12
 8000a88:	602b      	str	r3, [r5, #0]
 8000a8a:	e7d6      	b.n	8000a3a <_free_r+0x22>
 8000a8c:	6820      	ldr	r0, [r4, #0]
 8000a8e:	1821      	adds	r1, r4, r0
 8000a90:	428b      	cmp	r3, r1
 8000a92:	bf04      	itt	eq
 8000a94:	6819      	ldreq	r1, [r3, #0]
 8000a96:	685b      	ldreq	r3, [r3, #4]
 8000a98:	6063      	str	r3, [r4, #4]
 8000a9a:	bf04      	itt	eq
 8000a9c:	1809      	addeq	r1, r1, r0
 8000a9e:	6021      	streq	r1, [r4, #0]
 8000aa0:	6054      	str	r4, [r2, #4]
 8000aa2:	e7ca      	b.n	8000a3a <_free_r+0x22>
 8000aa4:	bd38      	pop	{r3, r4, r5, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001c4 	.word	0x200001c4

08000aac <sbrk_aligned>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4e0f      	ldr	r6, [pc, #60]	@ (8000aec <sbrk_aligned+0x40>)
 8000ab0:	460c      	mov	r4, r1
 8000ab2:	6831      	ldr	r1, [r6, #0]
 8000ab4:	4605      	mov	r5, r0
 8000ab6:	b911      	cbnz	r1, 8000abe <sbrk_aligned+0x12>
 8000ab8:	f000 fba6 	bl	8001208 <_sbrk_r>
 8000abc:	6030      	str	r0, [r6, #0]
 8000abe:	4621      	mov	r1, r4
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	f000 fba1 	bl	8001208 <_sbrk_r>
 8000ac6:	1c43      	adds	r3, r0, #1
 8000ac8:	d103      	bne.n	8000ad2 <sbrk_aligned+0x26>
 8000aca:	f04f 34ff 	mov.w	r4, #4294967295
 8000ace:	4620      	mov	r0, r4
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
 8000ad2:	1cc4      	adds	r4, r0, #3
 8000ad4:	f024 0403 	bic.w	r4, r4, #3
 8000ad8:	42a0      	cmp	r0, r4
 8000ada:	d0f8      	beq.n	8000ace <sbrk_aligned+0x22>
 8000adc:	1a21      	subs	r1, r4, r0
 8000ade:	4628      	mov	r0, r5
 8000ae0:	f000 fb92 	bl	8001208 <_sbrk_r>
 8000ae4:	3001      	adds	r0, #1
 8000ae6:	d1f2      	bne.n	8000ace <sbrk_aligned+0x22>
 8000ae8:	e7ef      	b.n	8000aca <sbrk_aligned+0x1e>
 8000aea:	bf00      	nop
 8000aec:	200001c0 	.word	0x200001c0

08000af0 <_malloc_r>:
 8000af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000af4:	1ccd      	adds	r5, r1, #3
 8000af6:	f025 0503 	bic.w	r5, r5, #3
 8000afa:	3508      	adds	r5, #8
 8000afc:	2d0c      	cmp	r5, #12
 8000afe:	bf38      	it	cc
 8000b00:	250c      	movcc	r5, #12
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	4606      	mov	r6, r0
 8000b06:	db01      	blt.n	8000b0c <_malloc_r+0x1c>
 8000b08:	42a9      	cmp	r1, r5
 8000b0a:	d904      	bls.n	8000b16 <_malloc_r+0x26>
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	6033      	str	r3, [r6, #0]
 8000b10:	2000      	movs	r0, #0
 8000b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bec <_malloc_r+0xfc>
 8000b1a:	f000 f869 	bl	8000bf0 <__malloc_lock>
 8000b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b22:	461c      	mov	r4, r3
 8000b24:	bb44      	cbnz	r4, 8000b78 <_malloc_r+0x88>
 8000b26:	4629      	mov	r1, r5
 8000b28:	4630      	mov	r0, r6
 8000b2a:	f7ff ffbf 	bl	8000aac <sbrk_aligned>
 8000b2e:	1c43      	adds	r3, r0, #1
 8000b30:	4604      	mov	r4, r0
 8000b32:	d158      	bne.n	8000be6 <_malloc_r+0xf6>
 8000b34:	f8d8 4000 	ldr.w	r4, [r8]
 8000b38:	4627      	mov	r7, r4
 8000b3a:	2f00      	cmp	r7, #0
 8000b3c:	d143      	bne.n	8000bc6 <_malloc_r+0xd6>
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	d04b      	beq.n	8000bda <_malloc_r+0xea>
 8000b42:	6823      	ldr	r3, [r4, #0]
 8000b44:	4639      	mov	r1, r7
 8000b46:	4630      	mov	r0, r6
 8000b48:	eb04 0903 	add.w	r9, r4, r3
 8000b4c:	f000 fb5c 	bl	8001208 <_sbrk_r>
 8000b50:	4581      	cmp	r9, r0
 8000b52:	d142      	bne.n	8000bda <_malloc_r+0xea>
 8000b54:	6821      	ldr	r1, [r4, #0]
 8000b56:	1a6d      	subs	r5, r5, r1
 8000b58:	4629      	mov	r1, r5
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	f7ff ffa6 	bl	8000aac <sbrk_aligned>
 8000b60:	3001      	adds	r0, #1
 8000b62:	d03a      	beq.n	8000bda <_malloc_r+0xea>
 8000b64:	6823      	ldr	r3, [r4, #0]
 8000b66:	442b      	add	r3, r5
 8000b68:	6023      	str	r3, [r4, #0]
 8000b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	bb62      	cbnz	r2, 8000bcc <_malloc_r+0xdc>
 8000b72:	f8c8 7000 	str.w	r7, [r8]
 8000b76:	e00f      	b.n	8000b98 <_malloc_r+0xa8>
 8000b78:	6822      	ldr	r2, [r4, #0]
 8000b7a:	1b52      	subs	r2, r2, r5
 8000b7c:	d420      	bmi.n	8000bc0 <_malloc_r+0xd0>
 8000b7e:	2a0b      	cmp	r2, #11
 8000b80:	d917      	bls.n	8000bb2 <_malloc_r+0xc2>
 8000b82:	1961      	adds	r1, r4, r5
 8000b84:	42a3      	cmp	r3, r4
 8000b86:	6025      	str	r5, [r4, #0]
 8000b88:	bf18      	it	ne
 8000b8a:	6059      	strne	r1, [r3, #4]
 8000b8c:	6863      	ldr	r3, [r4, #4]
 8000b8e:	bf08      	it	eq
 8000b90:	f8c8 1000 	streq.w	r1, [r8]
 8000b94:	5162      	str	r2, [r4, r5]
 8000b96:	604b      	str	r3, [r1, #4]
 8000b98:	4630      	mov	r0, r6
 8000b9a:	f000 f82f 	bl	8000bfc <__malloc_unlock>
 8000b9e:	f104 000b 	add.w	r0, r4, #11
 8000ba2:	1d23      	adds	r3, r4, #4
 8000ba4:	f020 0007 	bic.w	r0, r0, #7
 8000ba8:	1ac2      	subs	r2, r0, r3
 8000baa:	bf1c      	itt	ne
 8000bac:	1a1b      	subne	r3, r3, r0
 8000bae:	50a3      	strne	r3, [r4, r2]
 8000bb0:	e7af      	b.n	8000b12 <_malloc_r+0x22>
 8000bb2:	6862      	ldr	r2, [r4, #4]
 8000bb4:	42a3      	cmp	r3, r4
 8000bb6:	bf0c      	ite	eq
 8000bb8:	f8c8 2000 	streq.w	r2, [r8]
 8000bbc:	605a      	strne	r2, [r3, #4]
 8000bbe:	e7eb      	b.n	8000b98 <_malloc_r+0xa8>
 8000bc0:	4623      	mov	r3, r4
 8000bc2:	6864      	ldr	r4, [r4, #4]
 8000bc4:	e7ae      	b.n	8000b24 <_malloc_r+0x34>
 8000bc6:	463c      	mov	r4, r7
 8000bc8:	687f      	ldr	r7, [r7, #4]
 8000bca:	e7b6      	b.n	8000b3a <_malloc_r+0x4a>
 8000bcc:	461a      	mov	r2, r3
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	42a3      	cmp	r3, r4
 8000bd2:	d1fb      	bne.n	8000bcc <_malloc_r+0xdc>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	6053      	str	r3, [r2, #4]
 8000bd8:	e7de      	b.n	8000b98 <_malloc_r+0xa8>
 8000bda:	230c      	movs	r3, #12
 8000bdc:	6033      	str	r3, [r6, #0]
 8000bde:	4630      	mov	r0, r6
 8000be0:	f000 f80c 	bl	8000bfc <__malloc_unlock>
 8000be4:	e794      	b.n	8000b10 <_malloc_r+0x20>
 8000be6:	6005      	str	r5, [r0, #0]
 8000be8:	e7d6      	b.n	8000b98 <_malloc_r+0xa8>
 8000bea:	bf00      	nop
 8000bec:	200001c4 	.word	0x200001c4

08000bf0 <__malloc_lock>:
 8000bf0:	4801      	ldr	r0, [pc, #4]	@ (8000bf8 <__malloc_lock+0x8>)
 8000bf2:	f7ff bf0f 	b.w	8000a14 <__retarget_lock_acquire_recursive>
 8000bf6:	bf00      	nop
 8000bf8:	200001bc 	.word	0x200001bc

08000bfc <__malloc_unlock>:
 8000bfc:	4801      	ldr	r0, [pc, #4]	@ (8000c04 <__malloc_unlock+0x8>)
 8000bfe:	f7ff bf0a 	b.w	8000a16 <__retarget_lock_release_recursive>
 8000c02:	bf00      	nop
 8000c04:	200001bc 	.word	0x200001bc

08000c08 <__ssputs_r>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	688e      	ldr	r6, [r1, #8]
 8000c0e:	461f      	mov	r7, r3
 8000c10:	42be      	cmp	r6, r7
 8000c12:	680b      	ldr	r3, [r1, #0]
 8000c14:	4682      	mov	sl, r0
 8000c16:	460c      	mov	r4, r1
 8000c18:	4690      	mov	r8, r2
 8000c1a:	d82d      	bhi.n	8000c78 <__ssputs_r+0x70>
 8000c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000c24:	d026      	beq.n	8000c74 <__ssputs_r+0x6c>
 8000c26:	6965      	ldr	r5, [r4, #20]
 8000c28:	6909      	ldr	r1, [r1, #16]
 8000c2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c2e:	eba3 0901 	sub.w	r9, r3, r1
 8000c32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c36:	1c7b      	adds	r3, r7, #1
 8000c38:	444b      	add	r3, r9
 8000c3a:	106d      	asrs	r5, r5, #1
 8000c3c:	429d      	cmp	r5, r3
 8000c3e:	bf38      	it	cc
 8000c40:	461d      	movcc	r5, r3
 8000c42:	0553      	lsls	r3, r2, #21
 8000c44:	d527      	bpl.n	8000c96 <__ssputs_r+0x8e>
 8000c46:	4629      	mov	r1, r5
 8000c48:	f7ff ff52 	bl	8000af0 <_malloc_r>
 8000c4c:	4606      	mov	r6, r0
 8000c4e:	b360      	cbz	r0, 8000caa <__ssputs_r+0xa2>
 8000c50:	6921      	ldr	r1, [r4, #16]
 8000c52:	464a      	mov	r2, r9
 8000c54:	f000 fae8 	bl	8001228 <memcpy>
 8000c58:	89a3      	ldrh	r3, [r4, #12]
 8000c5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c62:	81a3      	strh	r3, [r4, #12]
 8000c64:	6126      	str	r6, [r4, #16]
 8000c66:	6165      	str	r5, [r4, #20]
 8000c68:	444e      	add	r6, r9
 8000c6a:	eba5 0509 	sub.w	r5, r5, r9
 8000c6e:	6026      	str	r6, [r4, #0]
 8000c70:	60a5      	str	r5, [r4, #8]
 8000c72:	463e      	mov	r6, r7
 8000c74:	42be      	cmp	r6, r7
 8000c76:	d900      	bls.n	8000c7a <__ssputs_r+0x72>
 8000c78:	463e      	mov	r6, r7
 8000c7a:	6820      	ldr	r0, [r4, #0]
 8000c7c:	4632      	mov	r2, r6
 8000c7e:	4641      	mov	r1, r8
 8000c80:	f000 faa8 	bl	80011d4 <memmove>
 8000c84:	68a3      	ldr	r3, [r4, #8]
 8000c86:	1b9b      	subs	r3, r3, r6
 8000c88:	60a3      	str	r3, [r4, #8]
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	4433      	add	r3, r6
 8000c8e:	6023      	str	r3, [r4, #0]
 8000c90:	2000      	movs	r0, #0
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	462a      	mov	r2, r5
 8000c98:	f000 fad4 	bl	8001244 <_realloc_r>
 8000c9c:	4606      	mov	r6, r0
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d1e0      	bne.n	8000c64 <__ssputs_r+0x5c>
 8000ca2:	6921      	ldr	r1, [r4, #16]
 8000ca4:	4650      	mov	r0, sl
 8000ca6:	f7ff feb7 	bl	8000a18 <_free_r>
 8000caa:	230c      	movs	r3, #12
 8000cac:	f8ca 3000 	str.w	r3, [sl]
 8000cb0:	89a3      	ldrh	r3, [r4, #12]
 8000cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb6:	81a3      	strh	r3, [r4, #12]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	e7e9      	b.n	8000c92 <__ssputs_r+0x8a>
	...

08000cc0 <_svfiprintf_r>:
 8000cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	898b      	ldrh	r3, [r1, #12]
 8000cc8:	061b      	lsls	r3, r3, #24
 8000cca:	b09d      	sub	sp, #116	@ 0x74
 8000ccc:	4607      	mov	r7, r0
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4614      	mov	r4, r2
 8000cd2:	d510      	bpl.n	8000cf6 <_svfiprintf_r+0x36>
 8000cd4:	690b      	ldr	r3, [r1, #16]
 8000cd6:	b973      	cbnz	r3, 8000cf6 <_svfiprintf_r+0x36>
 8000cd8:	2140      	movs	r1, #64	@ 0x40
 8000cda:	f7ff ff09 	bl	8000af0 <_malloc_r>
 8000cde:	6028      	str	r0, [r5, #0]
 8000ce0:	6128      	str	r0, [r5, #16]
 8000ce2:	b930      	cbnz	r0, 8000cf2 <_svfiprintf_r+0x32>
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	b01d      	add	sp, #116	@ 0x74
 8000cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cf2:	2340      	movs	r3, #64	@ 0x40
 8000cf4:	616b      	str	r3, [r5, #20]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d04:	2330      	movs	r3, #48	@ 0x30
 8000d06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000ea4 <_svfiprintf_r+0x1e4>
 8000d0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d0e:	f04f 0901 	mov.w	r9, #1
 8000d12:	4623      	mov	r3, r4
 8000d14:	469a      	mov	sl, r3
 8000d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d1a:	b10a      	cbz	r2, 8000d20 <_svfiprintf_r+0x60>
 8000d1c:	2a25      	cmp	r2, #37	@ 0x25
 8000d1e:	d1f9      	bne.n	8000d14 <_svfiprintf_r+0x54>
 8000d20:	ebba 0b04 	subs.w	fp, sl, r4
 8000d24:	d00b      	beq.n	8000d3e <_svfiprintf_r+0x7e>
 8000d26:	465b      	mov	r3, fp
 8000d28:	4622      	mov	r2, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	4638      	mov	r0, r7
 8000d2e:	f7ff ff6b 	bl	8000c08 <__ssputs_r>
 8000d32:	3001      	adds	r0, #1
 8000d34:	f000 80a7 	beq.w	8000e86 <_svfiprintf_r+0x1c6>
 8000d38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d3a:	445a      	add	r2, fp
 8000d3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 809f 	beq.w	8000e86 <_svfiprintf_r+0x1c6>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d52:	f10a 0a01 	add.w	sl, sl, #1
 8000d56:	9304      	str	r3, [sp, #16]
 8000d58:	9307      	str	r3, [sp, #28]
 8000d5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d60:	4654      	mov	r4, sl
 8000d62:	2205      	movs	r2, #5
 8000d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d68:	484e      	ldr	r0, [pc, #312]	@ (8000ea4 <_svfiprintf_r+0x1e4>)
 8000d6a:	f7ff fa39 	bl	80001e0 <memchr>
 8000d6e:	9a04      	ldr	r2, [sp, #16]
 8000d70:	b9d8      	cbnz	r0, 8000daa <_svfiprintf_r+0xea>
 8000d72:	06d0      	lsls	r0, r2, #27
 8000d74:	bf44      	itt	mi
 8000d76:	2320      	movmi	r3, #32
 8000d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d7c:	0711      	lsls	r1, r2, #28
 8000d7e:	bf44      	itt	mi
 8000d80:	232b      	movmi	r3, #43	@ 0x2b
 8000d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d86:	f89a 3000 	ldrb.w	r3, [sl]
 8000d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d8c:	d015      	beq.n	8000dba <_svfiprintf_r+0xfa>
 8000d8e:	9a07      	ldr	r2, [sp, #28]
 8000d90:	4654      	mov	r4, sl
 8000d92:	2000      	movs	r0, #0
 8000d94:	f04f 0c0a 	mov.w	ip, #10
 8000d98:	4621      	mov	r1, r4
 8000d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d9e:	3b30      	subs	r3, #48	@ 0x30
 8000da0:	2b09      	cmp	r3, #9
 8000da2:	d94b      	bls.n	8000e3c <_svfiprintf_r+0x17c>
 8000da4:	b1b0      	cbz	r0, 8000dd4 <_svfiprintf_r+0x114>
 8000da6:	9207      	str	r2, [sp, #28]
 8000da8:	e014      	b.n	8000dd4 <_svfiprintf_r+0x114>
 8000daa:	eba0 0308 	sub.w	r3, r0, r8
 8000dae:	fa09 f303 	lsl.w	r3, r9, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	9304      	str	r3, [sp, #16]
 8000db6:	46a2      	mov	sl, r4
 8000db8:	e7d2      	b.n	8000d60 <_svfiprintf_r+0xa0>
 8000dba:	9b03      	ldr	r3, [sp, #12]
 8000dbc:	1d19      	adds	r1, r3, #4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	9103      	str	r1, [sp, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	bfbb      	ittet	lt
 8000dc6:	425b      	neglt	r3, r3
 8000dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8000dcc:	9307      	strge	r3, [sp, #28]
 8000dce:	9307      	strlt	r3, [sp, #28]
 8000dd0:	bfb8      	it	lt
 8000dd2:	9204      	strlt	r2, [sp, #16]
 8000dd4:	7823      	ldrb	r3, [r4, #0]
 8000dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000dd8:	d10a      	bne.n	8000df0 <_svfiprintf_r+0x130>
 8000dda:	7863      	ldrb	r3, [r4, #1]
 8000ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dde:	d132      	bne.n	8000e46 <_svfiprintf_r+0x186>
 8000de0:	9b03      	ldr	r3, [sp, #12]
 8000de2:	1d1a      	adds	r2, r3, #4
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	9203      	str	r2, [sp, #12]
 8000de8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000dec:	3402      	adds	r4, #2
 8000dee:	9305      	str	r3, [sp, #20]
 8000df0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000eb4 <_svfiprintf_r+0x1f4>
 8000df4:	7821      	ldrb	r1, [r4, #0]
 8000df6:	2203      	movs	r2, #3
 8000df8:	4650      	mov	r0, sl
 8000dfa:	f7ff f9f1 	bl	80001e0 <memchr>
 8000dfe:	b138      	cbz	r0, 8000e10 <_svfiprintf_r+0x150>
 8000e00:	9b04      	ldr	r3, [sp, #16]
 8000e02:	eba0 000a 	sub.w	r0, r0, sl
 8000e06:	2240      	movs	r2, #64	@ 0x40
 8000e08:	4082      	lsls	r2, r0
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	3401      	adds	r4, #1
 8000e0e:	9304      	str	r3, [sp, #16]
 8000e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e14:	4824      	ldr	r0, [pc, #144]	@ (8000ea8 <_svfiprintf_r+0x1e8>)
 8000e16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e1a:	2206      	movs	r2, #6
 8000e1c:	f7ff f9e0 	bl	80001e0 <memchr>
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d036      	beq.n	8000e92 <_svfiprintf_r+0x1d2>
 8000e24:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <_svfiprintf_r+0x1ec>)
 8000e26:	bb1b      	cbnz	r3, 8000e70 <_svfiprintf_r+0x1b0>
 8000e28:	9b03      	ldr	r3, [sp, #12]
 8000e2a:	3307      	adds	r3, #7
 8000e2c:	f023 0307 	bic.w	r3, r3, #7
 8000e30:	3308      	adds	r3, #8
 8000e32:	9303      	str	r3, [sp, #12]
 8000e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e36:	4433      	add	r3, r6
 8000e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e3a:	e76a      	b.n	8000d12 <_svfiprintf_r+0x52>
 8000e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e40:	460c      	mov	r4, r1
 8000e42:	2001      	movs	r0, #1
 8000e44:	e7a8      	b.n	8000d98 <_svfiprintf_r+0xd8>
 8000e46:	2300      	movs	r3, #0
 8000e48:	3401      	adds	r4, #1
 8000e4a:	9305      	str	r3, [sp, #20]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 0c0a 	mov.w	ip, #10
 8000e52:	4620      	mov	r0, r4
 8000e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e58:	3a30      	subs	r2, #48	@ 0x30
 8000e5a:	2a09      	cmp	r2, #9
 8000e5c:	d903      	bls.n	8000e66 <_svfiprintf_r+0x1a6>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0c6      	beq.n	8000df0 <_svfiprintf_r+0x130>
 8000e62:	9105      	str	r1, [sp, #20]
 8000e64:	e7c4      	b.n	8000df0 <_svfiprintf_r+0x130>
 8000e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e7f0      	b.n	8000e52 <_svfiprintf_r+0x192>
 8000e70:	ab03      	add	r3, sp, #12
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	462a      	mov	r2, r5
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <_svfiprintf_r+0x1f0>)
 8000e78:	a904      	add	r1, sp, #16
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	f3af 8000 	nop.w
 8000e80:	1c42      	adds	r2, r0, #1
 8000e82:	4606      	mov	r6, r0
 8000e84:	d1d6      	bne.n	8000e34 <_svfiprintf_r+0x174>
 8000e86:	89ab      	ldrh	r3, [r5, #12]
 8000e88:	065b      	lsls	r3, r3, #25
 8000e8a:	f53f af2d 	bmi.w	8000ce8 <_svfiprintf_r+0x28>
 8000e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e90:	e72c      	b.n	8000cec <_svfiprintf_r+0x2c>
 8000e92:	ab03      	add	r3, sp, #12
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	462a      	mov	r2, r5
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <_svfiprintf_r+0x1f0>)
 8000e9a:	a904      	add	r1, sp, #16
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	f000 f879 	bl	8000f94 <_printf_i>
 8000ea2:	e7ed      	b.n	8000e80 <_svfiprintf_r+0x1c0>
 8000ea4:	0800130f 	.word	0x0800130f
 8000ea8:	08001319 	.word	0x08001319
 8000eac:	00000000 	.word	0x00000000
 8000eb0:	08000c09 	.word	0x08000c09
 8000eb4:	08001315 	.word	0x08001315

08000eb8 <_printf_common>:
 8000eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ebc:	4616      	mov	r6, r2
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	688a      	ldr	r2, [r1, #8]
 8000ec2:	690b      	ldr	r3, [r1, #16]
 8000ec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	bfb8      	it	lt
 8000ecc:	4613      	movlt	r3, r2
 8000ece:	6033      	str	r3, [r6, #0]
 8000ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ed4:	4607      	mov	r7, r0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	b10a      	cbz	r2, 8000ede <_printf_common+0x26>
 8000eda:	3301      	adds	r3, #1
 8000edc:	6033      	str	r3, [r6, #0]
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	0699      	lsls	r1, r3, #26
 8000ee2:	bf42      	ittt	mi
 8000ee4:	6833      	ldrmi	r3, [r6, #0]
 8000ee6:	3302      	addmi	r3, #2
 8000ee8:	6033      	strmi	r3, [r6, #0]
 8000eea:	6825      	ldr	r5, [r4, #0]
 8000eec:	f015 0506 	ands.w	r5, r5, #6
 8000ef0:	d106      	bne.n	8000f00 <_printf_common+0x48>
 8000ef2:	f104 0a19 	add.w	sl, r4, #25
 8000ef6:	68e3      	ldr	r3, [r4, #12]
 8000ef8:	6832      	ldr	r2, [r6, #0]
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	42ab      	cmp	r3, r5
 8000efe:	dc26      	bgt.n	8000f4e <_printf_common+0x96>
 8000f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f04:	6822      	ldr	r2, [r4, #0]
 8000f06:	3b00      	subs	r3, #0
 8000f08:	bf18      	it	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	0692      	lsls	r2, r2, #26
 8000f0e:	d42b      	bmi.n	8000f68 <_printf_common+0xb0>
 8000f10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f14:	4641      	mov	r1, r8
 8000f16:	4638      	mov	r0, r7
 8000f18:	47c8      	blx	r9
 8000f1a:	3001      	adds	r0, #1
 8000f1c:	d01e      	beq.n	8000f5c <_printf_common+0xa4>
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	6922      	ldr	r2, [r4, #16]
 8000f22:	f003 0306 	and.w	r3, r3, #6
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf02      	ittt	eq
 8000f2a:	68e5      	ldreq	r5, [r4, #12]
 8000f2c:	6833      	ldreq	r3, [r6, #0]
 8000f2e:	1aed      	subeq	r5, r5, r3
 8000f30:	68a3      	ldr	r3, [r4, #8]
 8000f32:	bf0c      	ite	eq
 8000f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f38:	2500      	movne	r5, #0
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	bfc4      	itt	gt
 8000f3e:	1a9b      	subgt	r3, r3, r2
 8000f40:	18ed      	addgt	r5, r5, r3
 8000f42:	2600      	movs	r6, #0
 8000f44:	341a      	adds	r4, #26
 8000f46:	42b5      	cmp	r5, r6
 8000f48:	d11a      	bne.n	8000f80 <_printf_common+0xc8>
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	e008      	b.n	8000f60 <_printf_common+0xa8>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	4652      	mov	r2, sl
 8000f52:	4641      	mov	r1, r8
 8000f54:	4638      	mov	r0, r7
 8000f56:	47c8      	blx	r9
 8000f58:	3001      	adds	r0, #1
 8000f5a:	d103      	bne.n	8000f64 <_printf_common+0xac>
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	3501      	adds	r5, #1
 8000f66:	e7c6      	b.n	8000ef6 <_printf_common+0x3e>
 8000f68:	18e1      	adds	r1, r4, r3
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	2030      	movs	r0, #48	@ 0x30
 8000f6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f72:	4422      	add	r2, r4
 8000f74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	e7c7      	b.n	8000f10 <_printf_common+0x58>
 8000f80:	2301      	movs	r3, #1
 8000f82:	4622      	mov	r2, r4
 8000f84:	4641      	mov	r1, r8
 8000f86:	4638      	mov	r0, r7
 8000f88:	47c8      	blx	r9
 8000f8a:	3001      	adds	r0, #1
 8000f8c:	d0e6      	beq.n	8000f5c <_printf_common+0xa4>
 8000f8e:	3601      	adds	r6, #1
 8000f90:	e7d9      	b.n	8000f46 <_printf_common+0x8e>
	...

08000f94 <_printf_i>:
 8000f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f98:	7e0f      	ldrb	r7, [r1, #24]
 8000f9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f9c:	2f78      	cmp	r7, #120	@ 0x78
 8000f9e:	4691      	mov	r9, r2
 8000fa0:	4680      	mov	r8, r0
 8000fa2:	460c      	mov	r4, r1
 8000fa4:	469a      	mov	sl, r3
 8000fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000faa:	d807      	bhi.n	8000fbc <_printf_i+0x28>
 8000fac:	2f62      	cmp	r7, #98	@ 0x62
 8000fae:	d80a      	bhi.n	8000fc6 <_printf_i+0x32>
 8000fb0:	2f00      	cmp	r7, #0
 8000fb2:	f000 80d2 	beq.w	800115a <_printf_i+0x1c6>
 8000fb6:	2f58      	cmp	r7, #88	@ 0x58
 8000fb8:	f000 80b9 	beq.w	800112e <_printf_i+0x19a>
 8000fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000fc4:	e03a      	b.n	800103c <_printf_i+0xa8>
 8000fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000fca:	2b15      	cmp	r3, #21
 8000fcc:	d8f6      	bhi.n	8000fbc <_printf_i+0x28>
 8000fce:	a101      	add	r1, pc, #4	@ (adr r1, 8000fd4 <_printf_i+0x40>)
 8000fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fd4:	0800102d 	.word	0x0800102d
 8000fd8:	08001041 	.word	0x08001041
 8000fdc:	08000fbd 	.word	0x08000fbd
 8000fe0:	08000fbd 	.word	0x08000fbd
 8000fe4:	08000fbd 	.word	0x08000fbd
 8000fe8:	08000fbd 	.word	0x08000fbd
 8000fec:	08001041 	.word	0x08001041
 8000ff0:	08000fbd 	.word	0x08000fbd
 8000ff4:	08000fbd 	.word	0x08000fbd
 8000ff8:	08000fbd 	.word	0x08000fbd
 8000ffc:	08000fbd 	.word	0x08000fbd
 8001000:	08001141 	.word	0x08001141
 8001004:	0800106b 	.word	0x0800106b
 8001008:	080010fb 	.word	0x080010fb
 800100c:	08000fbd 	.word	0x08000fbd
 8001010:	08000fbd 	.word	0x08000fbd
 8001014:	08001163 	.word	0x08001163
 8001018:	08000fbd 	.word	0x08000fbd
 800101c:	0800106b 	.word	0x0800106b
 8001020:	08000fbd 	.word	0x08000fbd
 8001024:	08000fbd 	.word	0x08000fbd
 8001028:	08001103 	.word	0x08001103
 800102c:	6833      	ldr	r3, [r6, #0]
 800102e:	1d1a      	adds	r2, r3, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6032      	str	r2, [r6, #0]
 8001034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800103c:	2301      	movs	r3, #1
 800103e:	e09d      	b.n	800117c <_printf_i+0x1e8>
 8001040:	6833      	ldr	r3, [r6, #0]
 8001042:	6820      	ldr	r0, [r4, #0]
 8001044:	1d19      	adds	r1, r3, #4
 8001046:	6031      	str	r1, [r6, #0]
 8001048:	0606      	lsls	r6, r0, #24
 800104a:	d501      	bpl.n	8001050 <_printf_i+0xbc>
 800104c:	681d      	ldr	r5, [r3, #0]
 800104e:	e003      	b.n	8001058 <_printf_i+0xc4>
 8001050:	0645      	lsls	r5, r0, #25
 8001052:	d5fb      	bpl.n	800104c <_printf_i+0xb8>
 8001054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001058:	2d00      	cmp	r5, #0
 800105a:	da03      	bge.n	8001064 <_printf_i+0xd0>
 800105c:	232d      	movs	r3, #45	@ 0x2d
 800105e:	426d      	negs	r5, r5
 8001060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001064:	4859      	ldr	r0, [pc, #356]	@ (80011cc <_printf_i+0x238>)
 8001066:	230a      	movs	r3, #10
 8001068:	e011      	b.n	800108e <_printf_i+0xfa>
 800106a:	6821      	ldr	r1, [r4, #0]
 800106c:	6833      	ldr	r3, [r6, #0]
 800106e:	0608      	lsls	r0, r1, #24
 8001070:	f853 5b04 	ldr.w	r5, [r3], #4
 8001074:	d402      	bmi.n	800107c <_printf_i+0xe8>
 8001076:	0649      	lsls	r1, r1, #25
 8001078:	bf48      	it	mi
 800107a:	b2ad      	uxthmi	r5, r5
 800107c:	2f6f      	cmp	r7, #111	@ 0x6f
 800107e:	4853      	ldr	r0, [pc, #332]	@ (80011cc <_printf_i+0x238>)
 8001080:	6033      	str	r3, [r6, #0]
 8001082:	bf14      	ite	ne
 8001084:	230a      	movne	r3, #10
 8001086:	2308      	moveq	r3, #8
 8001088:	2100      	movs	r1, #0
 800108a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800108e:	6866      	ldr	r6, [r4, #4]
 8001090:	60a6      	str	r6, [r4, #8]
 8001092:	2e00      	cmp	r6, #0
 8001094:	bfa2      	ittt	ge
 8001096:	6821      	ldrge	r1, [r4, #0]
 8001098:	f021 0104 	bicge.w	r1, r1, #4
 800109c:	6021      	strge	r1, [r4, #0]
 800109e:	b90d      	cbnz	r5, 80010a4 <_printf_i+0x110>
 80010a0:	2e00      	cmp	r6, #0
 80010a2:	d04b      	beq.n	800113c <_printf_i+0x1a8>
 80010a4:	4616      	mov	r6, r2
 80010a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80010aa:	fb03 5711 	mls	r7, r3, r1, r5
 80010ae:	5dc7      	ldrb	r7, [r0, r7]
 80010b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80010b4:	462f      	mov	r7, r5
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	460d      	mov	r5, r1
 80010ba:	d9f4      	bls.n	80010a6 <_printf_i+0x112>
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d10b      	bne.n	80010d8 <_printf_i+0x144>
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	07df      	lsls	r7, r3, #31
 80010c4:	d508      	bpl.n	80010d8 <_printf_i+0x144>
 80010c6:	6923      	ldr	r3, [r4, #16]
 80010c8:	6861      	ldr	r1, [r4, #4]
 80010ca:	4299      	cmp	r1, r3
 80010cc:	bfde      	ittt	le
 80010ce:	2330      	movle	r3, #48	@ 0x30
 80010d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80010d8:	1b92      	subs	r2, r2, r6
 80010da:	6122      	str	r2, [r4, #16]
 80010dc:	f8cd a000 	str.w	sl, [sp]
 80010e0:	464b      	mov	r3, r9
 80010e2:	aa03      	add	r2, sp, #12
 80010e4:	4621      	mov	r1, r4
 80010e6:	4640      	mov	r0, r8
 80010e8:	f7ff fee6 	bl	8000eb8 <_printf_common>
 80010ec:	3001      	adds	r0, #1
 80010ee:	d14a      	bne.n	8001186 <_printf_i+0x1f2>
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	b004      	add	sp, #16
 80010f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010fa:	6823      	ldr	r3, [r4, #0]
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	6023      	str	r3, [r4, #0]
 8001102:	4833      	ldr	r0, [pc, #204]	@ (80011d0 <_printf_i+0x23c>)
 8001104:	2778      	movs	r7, #120	@ 0x78
 8001106:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	6831      	ldr	r1, [r6, #0]
 800110e:	061f      	lsls	r7, r3, #24
 8001110:	f851 5b04 	ldr.w	r5, [r1], #4
 8001114:	d402      	bmi.n	800111c <_printf_i+0x188>
 8001116:	065f      	lsls	r7, r3, #25
 8001118:	bf48      	it	mi
 800111a:	b2ad      	uxthmi	r5, r5
 800111c:	6031      	str	r1, [r6, #0]
 800111e:	07d9      	lsls	r1, r3, #31
 8001120:	bf44      	itt	mi
 8001122:	f043 0320 	orrmi.w	r3, r3, #32
 8001126:	6023      	strmi	r3, [r4, #0]
 8001128:	b11d      	cbz	r5, 8001132 <_printf_i+0x19e>
 800112a:	2310      	movs	r3, #16
 800112c:	e7ac      	b.n	8001088 <_printf_i+0xf4>
 800112e:	4827      	ldr	r0, [pc, #156]	@ (80011cc <_printf_i+0x238>)
 8001130:	e7e9      	b.n	8001106 <_printf_i+0x172>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	f023 0320 	bic.w	r3, r3, #32
 8001138:	6023      	str	r3, [r4, #0]
 800113a:	e7f6      	b.n	800112a <_printf_i+0x196>
 800113c:	4616      	mov	r6, r2
 800113e:	e7bd      	b.n	80010bc <_printf_i+0x128>
 8001140:	6833      	ldr	r3, [r6, #0]
 8001142:	6825      	ldr	r5, [r4, #0]
 8001144:	6961      	ldr	r1, [r4, #20]
 8001146:	1d18      	adds	r0, r3, #4
 8001148:	6030      	str	r0, [r6, #0]
 800114a:	062e      	lsls	r6, r5, #24
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	d501      	bpl.n	8001154 <_printf_i+0x1c0>
 8001150:	6019      	str	r1, [r3, #0]
 8001152:	e002      	b.n	800115a <_printf_i+0x1c6>
 8001154:	0668      	lsls	r0, r5, #25
 8001156:	d5fb      	bpl.n	8001150 <_printf_i+0x1bc>
 8001158:	8019      	strh	r1, [r3, #0]
 800115a:	2300      	movs	r3, #0
 800115c:	6123      	str	r3, [r4, #16]
 800115e:	4616      	mov	r6, r2
 8001160:	e7bc      	b.n	80010dc <_printf_i+0x148>
 8001162:	6833      	ldr	r3, [r6, #0]
 8001164:	1d1a      	adds	r2, r3, #4
 8001166:	6032      	str	r2, [r6, #0]
 8001168:	681e      	ldr	r6, [r3, #0]
 800116a:	6862      	ldr	r2, [r4, #4]
 800116c:	2100      	movs	r1, #0
 800116e:	4630      	mov	r0, r6
 8001170:	f7ff f836 	bl	80001e0 <memchr>
 8001174:	b108      	cbz	r0, 800117a <_printf_i+0x1e6>
 8001176:	1b80      	subs	r0, r0, r6
 8001178:	6060      	str	r0, [r4, #4]
 800117a:	6863      	ldr	r3, [r4, #4]
 800117c:	6123      	str	r3, [r4, #16]
 800117e:	2300      	movs	r3, #0
 8001180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001184:	e7aa      	b.n	80010dc <_printf_i+0x148>
 8001186:	6923      	ldr	r3, [r4, #16]
 8001188:	4632      	mov	r2, r6
 800118a:	4649      	mov	r1, r9
 800118c:	4640      	mov	r0, r8
 800118e:	47d0      	blx	sl
 8001190:	3001      	adds	r0, #1
 8001192:	d0ad      	beq.n	80010f0 <_printf_i+0x15c>
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	079b      	lsls	r3, r3, #30
 8001198:	d413      	bmi.n	80011c2 <_printf_i+0x22e>
 800119a:	68e0      	ldr	r0, [r4, #12]
 800119c:	9b03      	ldr	r3, [sp, #12]
 800119e:	4298      	cmp	r0, r3
 80011a0:	bfb8      	it	lt
 80011a2:	4618      	movlt	r0, r3
 80011a4:	e7a6      	b.n	80010f4 <_printf_i+0x160>
 80011a6:	2301      	movs	r3, #1
 80011a8:	4632      	mov	r2, r6
 80011aa:	4649      	mov	r1, r9
 80011ac:	4640      	mov	r0, r8
 80011ae:	47d0      	blx	sl
 80011b0:	3001      	adds	r0, #1
 80011b2:	d09d      	beq.n	80010f0 <_printf_i+0x15c>
 80011b4:	3501      	adds	r5, #1
 80011b6:	68e3      	ldr	r3, [r4, #12]
 80011b8:	9903      	ldr	r1, [sp, #12]
 80011ba:	1a5b      	subs	r3, r3, r1
 80011bc:	42ab      	cmp	r3, r5
 80011be:	dcf2      	bgt.n	80011a6 <_printf_i+0x212>
 80011c0:	e7eb      	b.n	800119a <_printf_i+0x206>
 80011c2:	2500      	movs	r5, #0
 80011c4:	f104 0619 	add.w	r6, r4, #25
 80011c8:	e7f5      	b.n	80011b6 <_printf_i+0x222>
 80011ca:	bf00      	nop
 80011cc:	08001320 	.word	0x08001320
 80011d0:	08001331 	.word	0x08001331

080011d4 <memmove>:
 80011d4:	4288      	cmp	r0, r1
 80011d6:	b510      	push	{r4, lr}
 80011d8:	eb01 0402 	add.w	r4, r1, r2
 80011dc:	d902      	bls.n	80011e4 <memmove+0x10>
 80011de:	4284      	cmp	r4, r0
 80011e0:	4623      	mov	r3, r4
 80011e2:	d807      	bhi.n	80011f4 <memmove+0x20>
 80011e4:	1e43      	subs	r3, r0, #1
 80011e6:	42a1      	cmp	r1, r4
 80011e8:	d008      	beq.n	80011fc <memmove+0x28>
 80011ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80011ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80011f2:	e7f8      	b.n	80011e6 <memmove+0x12>
 80011f4:	4402      	add	r2, r0
 80011f6:	4601      	mov	r1, r0
 80011f8:	428a      	cmp	r2, r1
 80011fa:	d100      	bne.n	80011fe <memmove+0x2a>
 80011fc:	bd10      	pop	{r4, pc}
 80011fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001206:	e7f7      	b.n	80011f8 <memmove+0x24>

08001208 <_sbrk_r>:
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	4d06      	ldr	r5, [pc, #24]	@ (8001224 <_sbrk_r+0x1c>)
 800120c:	2300      	movs	r3, #0
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	602b      	str	r3, [r5, #0]
 8001214:	f7ff fb1a 	bl	800084c <_sbrk>
 8001218:	1c43      	adds	r3, r0, #1
 800121a:	d102      	bne.n	8001222 <_sbrk_r+0x1a>
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	b103      	cbz	r3, 8001222 <_sbrk_r+0x1a>
 8001220:	6023      	str	r3, [r4, #0]
 8001222:	bd38      	pop	{r3, r4, r5, pc}
 8001224:	200001b8 	.word	0x200001b8

08001228 <memcpy>:
 8001228:	440a      	add	r2, r1
 800122a:	4291      	cmp	r1, r2
 800122c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001230:	d100      	bne.n	8001234 <memcpy+0xc>
 8001232:	4770      	bx	lr
 8001234:	b510      	push	{r4, lr}
 8001236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800123a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800123e:	4291      	cmp	r1, r2
 8001240:	d1f9      	bne.n	8001236 <memcpy+0xe>
 8001242:	bd10      	pop	{r4, pc}

08001244 <_realloc_r>:
 8001244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001248:	4680      	mov	r8, r0
 800124a:	4615      	mov	r5, r2
 800124c:	460c      	mov	r4, r1
 800124e:	b921      	cbnz	r1, 800125a <_realloc_r+0x16>
 8001250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001254:	4611      	mov	r1, r2
 8001256:	f7ff bc4b 	b.w	8000af0 <_malloc_r>
 800125a:	b92a      	cbnz	r2, 8001268 <_realloc_r+0x24>
 800125c:	f7ff fbdc 	bl	8000a18 <_free_r>
 8001260:	2400      	movs	r4, #0
 8001262:	4620      	mov	r0, r4
 8001264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001268:	f000 f81a 	bl	80012a0 <_malloc_usable_size_r>
 800126c:	4285      	cmp	r5, r0
 800126e:	4606      	mov	r6, r0
 8001270:	d802      	bhi.n	8001278 <_realloc_r+0x34>
 8001272:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001276:	d8f4      	bhi.n	8001262 <_realloc_r+0x1e>
 8001278:	4629      	mov	r1, r5
 800127a:	4640      	mov	r0, r8
 800127c:	f7ff fc38 	bl	8000af0 <_malloc_r>
 8001280:	4607      	mov	r7, r0
 8001282:	2800      	cmp	r0, #0
 8001284:	d0ec      	beq.n	8001260 <_realloc_r+0x1c>
 8001286:	42b5      	cmp	r5, r6
 8001288:	462a      	mov	r2, r5
 800128a:	4621      	mov	r1, r4
 800128c:	bf28      	it	cs
 800128e:	4632      	movcs	r2, r6
 8001290:	f7ff ffca 	bl	8001228 <memcpy>
 8001294:	4621      	mov	r1, r4
 8001296:	4640      	mov	r0, r8
 8001298:	f7ff fbbe 	bl	8000a18 <_free_r>
 800129c:	463c      	mov	r4, r7
 800129e:	e7e0      	b.n	8001262 <_realloc_r+0x1e>

080012a0 <_malloc_usable_size_r>:
 80012a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012a4:	1f18      	subs	r0, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bfbc      	itt	lt
 80012aa:	580b      	ldrlt	r3, [r1, r0]
 80012ac:	18c0      	addlt	r0, r0, r3
 80012ae:	4770      	bx	lr

080012b0 <_init>:
 80012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b2:	bf00      	nop
 80012b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012b6:	bc08      	pop	{r3}
 80012b8:	469e      	mov	lr, r3
 80012ba:	4770      	bx	lr

080012bc <_fini>:
 80012bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012be:	bf00      	nop
 80012c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012c2:	bc08      	pop	{r3}
 80012c4:	469e      	mov	lr, r3
 80012c6:	4770      	bx	lr
